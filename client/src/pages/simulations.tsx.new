import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useEthereum } from '@/hooks/use-ethereum';
import NetworkSelector from '@/components/network-selector';
import TabNavigation from '@/components/tab-navigation';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Skeleton } from '@/components/ui/skeleton';
import { 
  ArrowRight, 
  ChevronDown, 
  Settings, 
  Zap, 
  RefreshCw, 
  Shield, 
  AlertTriangle, 
  ChevronRight, 
  Check,
  X,
  CopyIcon,
  LucideGitCompare,
  Layers
} from 'lucide-react';
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";

export default function Simulations() {
  const { address } = useEthereum();
  const [showApiModal, setShowApiModal] = useState(false);
  const [showTransactionModal, setShowTransactionModal] = useState(false);
  const [protocolTab, setProtocolTab] = useState("uniswap");
  const [selectedToken, setSelectedToken] = useState("ETH");
  const [swapToken, setSwapToken] = useState("USDC");
  const [amount, setAmount] = useState("1.0");
  const [slippage, setSlippage] = useState("0.5");
  const [simulationInProgress, setSimulationInProgress] = useState(false);
  const [showResultsModal, setShowResultsModal] = useState(false);
  const [simulationResults, setSimulationResults] = useState<any>(null);

  // Fetch market data for available tokens
  const { data: marketData, isLoading: isLoadingMarket } = useQuery({
    queryKey: ['/api/market-data'],
    enabled: true
  });

  // Mock protocols list
  const protocols = [
    { id: "uniswap", name: "Uniswap V3", icon: "🦄", color: "text-pink-500", type: "DEX", gasEfficiency: "Medium" },
    { id: "sushiswap", name: "SushiSwap", icon: "🍣", color: "text-blue-500", type: "DEX", gasEfficiency: "Medium" },
    { id: "curve", name: "Curve Finance", icon: "⚡", color: "text-red-500", type: "Stablecoin DEX", gasEfficiency: "High" },
    { id: "balancer", name: "Balancer", icon: "⚖️", color: "text-purple-500", type: "AMM", gasEfficiency: "Medium" },
    { id: "aave", name: "Aave", icon: "👻", color: "text-indigo-500", type: "Lending", gasEfficiency: "Low" },
    { id: "compound", name: "Compound", icon: "🏦", color: "text-green-500", type: "Lending", gasEfficiency: "Low" },
  ];

  // Run a transaction simulation
  const runTransactionSimulation = () => {
    setSimulationInProgress(true);
    
    // Simulate network request delay
    setTimeout(() => {
      const currentProtocol = protocols.find(p => p.id === protocolTab);
      
      // Generate deterministic simulation results
      const results = {
        protocol: currentProtocol?.name,
        fromToken: selectedToken,
        toToken: swapToken,
        amount: parseFloat(amount),
        estimatedReturn: parseFloat(amount) * (selectedToken === 'ETH' ? 1800 : 1),
        gasCost: (protocolTab === 'uniswap' ? 25 : protocolTab === 'curve' ? 18 : 30),
        executionTime: (protocolTab === 'uniswap' ? 0.8 : protocolTab === 'curve' ? 1.2 : 0.9),
        slippage: parseFloat(slippage),
        priceImpact: (parseFloat(amount) > 10 ? 2.5 : parseFloat(amount) > 5 ? 1.2 : 0.4),
        route: [
          { protocol: currentProtocol?.name, fromToken: selectedToken, toToken: swapToken, portion: 100 }
        ],
        warnings: [],
        success: true
      };
      
      // Add warnings based on conditions
      if (parseFloat(amount) > 10) {
        results.warnings.push("Large transaction may experience higher slippage than estimated");
      }
      
      if (protocolTab === 'curve' && selectedToken !== 'USDC' && swapToken !== 'USDC') {
        results.warnings.push("Non-stablecoin pairs may have reduced efficiency on Curve");
      }
      
      setSimulationResults(results);
      setSimulationInProgress(false);
      setShowResultsModal(true);
    }, 2000);
  };

  // Simulate transaction with multiple protocols to compare
  const runMultiProtocolSimulation = () => {
    setSimulationInProgress(true);
    
    // Simulate network request delay
    setTimeout(() => {
      // Generate comparison results for different protocols
      const comparisonResults = protocols.slice(0, 4).map(protocol => {
        const baseGasPrice = protocol.id === 'curve' ? 18 : 
                            protocol.id === 'uniswap' ? 25 : 
                            protocol.id === 'sushiswap' ? 22 : 30;
        
        // Add small deterministic variations
        const gasPriceVariation = (protocol.id.charCodeAt(0) % 5) - 2;
        
        // Calculate deterministic output based on protocol and input
        const efficiency = protocol.id === 'curve' ? 0.998 : 
                          protocol.id === 'uniswap' ? 0.995 : 
                          protocol.id === 'sushiswap' ? 0.994 : 0.990;
        
        return {
          protocol: protocol.name,
          icon: protocol.icon,
          color: protocol.color,
          fromToken: selectedToken,
          toToken: swapToken,
          amount: parseFloat(amount),
          estimatedReturn: parseFloat(amount) * (selectedToken === 'ETH' ? 1800 : 1) * efficiency,
          gasCost: baseGasPrice + gasPriceVariation,
          executionTime: (protocol.id === 'uniswap' ? 0.8 : protocol.id === 'curve' ? 1.2 : 0.9),
          slippage: parseFloat(slippage),
          priceImpact: (parseFloat(amount) > 10 ? 2.5 : parseFloat(amount) > 5 ? 1.2 : 0.4) 
                      * (protocol.id === 'curve' ? 0.8 : protocol.id === 'uniswap' ? 1.0 : 1.2),
          warnings: [],
          success: true
        };
      });
      
      setSimulationResults({
        type: 'comparison',
        results: comparisonResults
      });
      
      setSimulationInProgress(false);
      setShowResultsModal(true);
    }, 2500);
  };

  return (
    <div>
      <NetworkSelector onOpenApiModal={() => setShowApiModal(true)} />
      
      <div className="mb-6">
        <TabNavigation activeTab="simulations" setActiveTab={() => {}} />
      </div>
      
      <div className="mb-6 flex justify-between items-center">
        <h1 className="text-2xl font-bold">Transaction Simulations</h1>
        <Button 
          onClick={() => setShowTransactionModal(true)}
          className="btn-primary"
        >
          <Zap size={18} className="mr-2" />
          New Transaction Simulation
        </Button>
      </div>
      
      {/* Protocol Simulator Panel */}
      <Card className="bg-card border-secondary mb-6">
        <CardHeader className="bg-secondary-dark">
          <CardTitle className="flex items-center">
            <LucideGitCompare className="mr-2" size={20} />
            Protocol Transaction Simulator
          </CardTitle>
          <CardDescription>
            Simulate transactions across different protocols to compare gas fees, slippage, and execution time
          </CardDescription>
        </CardHeader>
        <CardContent className="p-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* From Token Panel */}
            <Card className="border border-secondary">
              <CardHeader className="py-3 px-4">
                <CardTitle className="text-sm">From Token</CardTitle>
              </CardHeader>
              <CardContent className="py-3 px-4">
                <div className="space-y-4">
                  <Select 
                    value={selectedToken} 
                    onValueChange={setSelectedToken}
                  >
                    <SelectTrigger className="bg-secondary/20 border-secondary-light">
                      <SelectValue placeholder="Select token" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ETH">ETH - Ethereum</SelectItem>
                      <SelectItem value="WBTC">WBTC - Wrapped Bitcoin</SelectItem>
                      <SelectItem value="USDC">USDC - USD Coin</SelectItem>
                      <SelectItem value="USDT">USDT - Tether</SelectItem>
                      <SelectItem value="DAI">DAI - Dai Stablecoin</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <div className="space-y-2">
                    <Label htmlFor="amount">Amount</Label>
                    <Input
                      id="amount"
                      type="number"
                      value={amount}
                      onChange={(e) => setAmount(e.target.value)}
                      className="bg-secondary/20 border-secondary-light"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
            
            {/* Arrow */}
            <div className="flex items-center justify-center">
              <div className="hidden md:block bg-secondary/30 w-full h-[2px] relative">
                <div className="absolute top-1/2 left-1/2 transform -translate-y-1/2 -translate-x-1/2 bg-secondary/30 p-2 rounded-full">
                  <ArrowRight className="text-primary" />
                </div>
              </div>
              <div className="md:hidden">
                <div className="bg-secondary/30 p-2 rounded-full rotate-90">
                  <ArrowRight className="text-primary" />
                </div>
              </div>
            </div>
            
            {/* To Token Panel */}
            <Card className="border border-secondary">
              <CardHeader className="py-3 px-4">
                <CardTitle className="text-sm">To Token</CardTitle>
              </CardHeader>
              <CardContent className="py-3 px-4">
                <div className="space-y-4">
                  <Select 
                    value={swapToken} 
                    onValueChange={setSwapToken}
                  >
                    <SelectTrigger className="bg-secondary/20 border-secondary-light">
                      <SelectValue placeholder="Select token" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="ETH">ETH - Ethereum</SelectItem>
                      <SelectItem value="WBTC">WBTC - Wrapped Bitcoin</SelectItem>
                      <SelectItem value="USDC">USDC - USD Coin</SelectItem>
                      <SelectItem value="USDT">USDT - Tether</SelectItem>
                      <SelectItem value="DAI">DAI - Dai Stablecoin</SelectItem>
                    </SelectContent>
                  </Select>
                  
                  <div className="space-y-2">
                    <Label htmlFor="slippage">Slippage Tolerance (%)</Label>
                    <Input
                      id="slippage"
                      type="number"
                      value={slippage}
                      onChange={(e) => setSlippage(e.target.value)}
                      className="bg-secondary/20 border-secondary-light"
                      step="0.1"
                      min="0.1"
                      max="5"
                    />
                  </div>
                </div>
              </CardContent>
            </Card>
          </div>
          
          {/* Protocol Selection */}
          <div className="mt-6">
            <Label>Select Protocol</Label>
            <Tabs value={protocolTab} onValueChange={setProtocolTab} className="mt-2">
              <TabsList className="w-full grid grid-cols-3 md:grid-cols-6">
                {protocols.map(protocol => (
                  <TabsTrigger key={protocol.id} value={protocol.id} className="flex flex-col py-3 px-2">
                    <span className="text-xl mb-1">{protocol.icon}</span>
                    <span className="text-xs">{protocol.name}</span>
                  </TabsTrigger>
                ))}
              </TabsList>
              
              {protocols.map(protocol => (
                <TabsContent key={protocol.id} value={protocol.id} className="mt-4">
                  <Card className="border-secondary">
                    <CardHeader className="py-3">
                      <CardTitle className="flex items-center">
                        <span className="text-xl mr-2">{protocol.icon}</span>
                        <span className={protocol.color}>{protocol.name}</span>
                      </CardTitle>
                      <CardDescription>
                        Protocol Type: {protocol.type} | Gas Efficiency: {protocol.gasEfficiency}
                      </CardDescription>
                    </CardHeader>
                    <CardContent className="py-3">
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="bg-secondary/20 p-3 rounded-md">
                          <div className="text-xs text-muted-foreground mb-1">Routing Strategy</div>
                          <div className="flex items-center">
                            <Layers size={16} className="mr-1" />
                            <span>Smart Order Routing</span>
                          </div>
                        </div>
                        
                        <div className="bg-secondary/20 p-3 rounded-md">
                          <div className="text-xs text-muted-foreground mb-1">Transaction Security</div>
                          <div className="flex items-center">
                            <Shield size={16} className="mr-1" />
                            <span>Moderate to High</span>
                          </div>
                        </div>
                        
                        <div className="bg-secondary/20 p-3 rounded-md">
                          <div className="text-xs text-muted-foreground mb-1">Liquidity Sources</div>
                          <div className="flex items-center">
                            <Zap size={16} className="mr-1" />
                            <span>Multiple Pools & Reserves</span>
                          </div>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                </TabsContent>
              ))}
            </Tabs>
          </div>
          
          {/* Action Buttons */}
          <div className="mt-6 flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3">
            <Button 
              onClick={runTransactionSimulation}
              disabled={simulationInProgress}
              className="flex-1 btn-primary"
            >
              {simulationInProgress ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Simulating Transaction...
                </>
              ) : (
                <>
                  <Zap size={16} className="mr-2" />
                  Simulate Transaction
                </>
              )}
            </Button>
            
            <Button 
              variant="outline"
              onClick={runMultiProtocolSimulation}
              disabled={simulationInProgress}
              className="flex-1"
            >
              <LucideGitCompare size={16} className="mr-2" />
              Compare All Protocols
            </Button>
            
            <Button variant="outline" className="flex-1">
              <Settings size={16} className="mr-2" />
              Advanced Settings
            </Button>
          </div>
        </CardContent>
      </Card>
      
      {/* Recent Simulations */}
      <Card className="bg-card border-secondary mb-6">
        <CardHeader className="bg-secondary-dark">
          <CardTitle>Recent Transaction Simulations</CardTitle>
        </CardHeader>
        <CardContent className="p-0">
          <Table>
            <TableHeader>
              <TableRow className="hover:bg-secondary/20">
                <TableHead className="w-[180px]">Protocol</TableHead>
                <TableHead>Transaction Type</TableHead>
                <TableHead>Amount</TableHead>
                <TableHead>Gas Cost</TableHead>
                <TableHead>Estimated Time</TableHead>
                <TableHead className="text-right">Status</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              <TableRow className="hover:bg-secondary/20">
                <TableCell className="font-medium">
                  <div className="flex items-center">
                    <span className="text-xl mr-2">🦄</span>
                    <span>Uniswap V3</span>
                  </div>
                </TableCell>
                <TableCell>ETH → USDC Swap</TableCell>
                <TableCell>2.5 ETH</TableCell>
                <TableCell>$24.32</TableCell>
                <TableCell>~45 seconds</TableCell>
                <TableCell className="text-right">
                  <Badge variant="outline" className="bg-green-500/10 text-green-500 hover:bg-green-500/20">Success</Badge>
                </TableCell>
              </TableRow>
              <TableRow className="hover:bg-secondary/20">
                <TableCell className="font-medium">
                  <div className="flex items-center">
                    <span className="text-xl mr-2">👻</span>
                    <span>Aave</span>
                  </div>
                </TableCell>
                <TableCell>ETH Deposit</TableCell>
                <TableCell>5.0 ETH</TableCell>
                <TableCell>$31.18</TableCell>
                <TableCell>~60 seconds</TableCell>
                <TableCell className="text-right">
                  <Badge variant="outline" className="bg-green-500/10 text-green-500 hover:bg-green-500/20">Success</Badge>
                </TableCell>
              </TableRow>
              <TableRow className="hover:bg-secondary/20">
                <TableCell className="font-medium">
                  <div className="flex items-center">
                    <span className="text-xl mr-2">⚡</span>
                    <span>Curve Finance</span>
                  </div>
                </TableCell>
                <TableCell>USDC → DAI Swap</TableCell>
                <TableCell>10,000 USDC</TableCell>
                <TableCell>$18.75</TableCell>
                <TableCell>~30 seconds</TableCell>
                <TableCell className="text-right">
                  <Badge variant="outline" className="bg-green-500/10 text-green-500 hover:bg-green-500/20">Success</Badge>
                </TableCell>
              </TableRow>
              <TableRow className="hover:bg-secondary/20">
                <TableCell className="font-medium">
                  <div className="flex items-center">
                    <span className="text-xl mr-2">🏦</span>
                    <span>Compound</span>
                  </div>
                </TableCell>
                <TableCell>USDC Withdrawal</TableCell>
                <TableCell>5,000 USDC</TableCell>
                <TableCell>$42.96</TableCell>
                <TableCell>~90 seconds</TableCell>
                <TableCell className="text-right">
                  <Badge variant="outline" className="bg-red-500/10 text-red-500 hover:bg-red-500/20">Failed</Badge>
                </TableCell>
              </TableRow>
            </TableBody>
          </Table>
        </CardContent>
      </Card>
      
      {/* Transaction Guidelines Card */}
      <Card className="bg-card border-secondary mb-6">
        <CardHeader className="bg-secondary-dark">
          <CardTitle>Transaction Simulation Guidelines</CardTitle>
        </CardHeader>
        <CardContent className="p-4">
          <div className="space-y-4">
            <div className="p-4 bg-primary/10 border border-primary/30 rounded-md">
              <h3 className="font-medium mb-2">About Transaction Simulations</h3>
              <p className="text-sm text-foreground/80 mb-2">
                Transaction simulations allow you to test how transactions would execute on different protocols before 
                committing to them on-chain. This saves gas fees and helps avoid failed transactions.
              </p>
              <ul className="text-sm space-y-2 list-disc pl-4">
                <li>Simulations calculate estimated gas costs, slippage, and execution time</li>
                <li>Compare different protocols to find the most efficient route for your transaction</li>
                <li>Identify potential issues before they occur on-chain</li>
                <li>Test complex DeFi interactions without risking funds</li>
              </ul>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="p-3 bg-secondary/20 rounded-md">
                <h4 className="font-medium mb-1">Best Practices</h4>
                <ul className="text-sm space-y-1 list-disc pl-4">
                  <li>Always simulate large transactions before execution</li>
                  <li>Compare multiple protocols for the best rates and fees</li>
                  <li>Set appropriate slippage tolerance based on trade size</li>
                  <li>Check for potential failed transaction conditions</li>
                </ul>
              </div>
              
              <div className="p-3 bg-secondary/20 rounded-md">
                <h4 className="font-medium mb-1">Limitations</h4>
                <ul className="text-sm space-y-1 list-disc pl-4">
                  <li>Simulations may not account for extreme market volatility</li>
                  <li>Gas prices can change between simulation and execution</li>
                  <li>Some complex contract interactions cannot be fully simulated</li>
                  <li>Results are estimates and actual execution may vary</li>
                </ul>
              </div>
            </div>
          </div>
        </CardContent>
      </Card>
      
      {/* Simulation Results Modal */}
      <Dialog open={showResultsModal} onOpenChange={setShowResultsModal}>
        <DialogContent className="bg-card border-secondary max-w-3xl">
          <DialogHeader>
            <DialogTitle className="text-lg font-semibold">
              Transaction Simulation Results
            </DialogTitle>
            <DialogDescription>
              Review the detailed analysis of your simulated transaction
            </DialogDescription>
          </DialogHeader>
          
          {simulationResults && simulationResults.type === 'comparison' ? (
            // Protocol Comparison Results
            <div className="space-y-6">
              <div className="bg-secondary/20 p-4 rounded-md">
                <h3 className="text-sm font-medium mb-2">Transaction Details</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <span className="text-xs text-muted-foreground">From</span>
                    <div className="font-medium">{simulationResults.results[0].amount} {simulationResults.results[0].fromToken}</div>
                  </div>
                  <div>
                    <span className="text-xs text-muted-foreground">To</span>
                    <div className="font-medium">~ {simulationResults.results[0].estimatedReturn.toFixed(2)} {simulationResults.results[0].toToken}</div>
                  </div>
                </div>
              </div>
              
              <div>
                <h3 className="text-sm font-medium mb-2">Protocol Comparison</h3>
                <Table>
                  <TableHeader>
                    <TableRow className="hover:bg-secondary/20">
                      <TableHead>Protocol</TableHead>
                      <TableHead>Return Amount</TableHead>
                      <TableHead>Gas Cost</TableHead>
                      <TableHead>Execution Time</TableHead>
                      <TableHead>Price Impact</TableHead>
                      <TableHead>Recommendation</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {simulationResults.results.map((result: any, index: number) => {
                      // Find best in each category
                      const protocols = simulationResults.results;
                      const isHighestReturn = result.estimatedReturn === Math.max(...protocols.map((p: any) => p.estimatedReturn));
                      const isLowestGas = result.gasCost === Math.min(...protocols.map((p: any) => p.gasCost));
                      const isLowestImpact = result.priceImpact === Math.min(...protocols.map((p: any) => p.priceImpact));
                      
                      // Calculate overall score (higher is better)
                      const overallScore = 
                        (result.estimatedReturn / protocols[0].estimatedReturn) * 0.5 + 
                        (Math.min(...protocols.map((p: any) => p.gasCost)) / result.gasCost) * 0.3 +
                        (Math.min(...protocols.map((p: any) => p.priceImpact)) / result.priceImpact) * 0.2;
                      
                      const isBestOverall = overallScore === Math.max(...protocols.map((p: any) => 
                        (p.estimatedReturn / protocols[0].estimatedReturn) * 0.5 + 
                        (Math.min(...protocols.map((p2: any) => p2.gasCost)) / p.gasCost) * 0.3 +
                        (Math.min(...protocols.map((p2: any) => p2.priceImpact)) / p.priceImpact) * 0.2
                      ));
                      
                      return (
                        <TableRow key={index} className={isBestOverall ? "bg-primary/5 hover:bg-primary/10" : "hover:bg-secondary/20"}>
                          <TableCell className="font-medium">
                            <div className="flex items-center">
                              <span className="text-xl mr-2">{result.icon}</span>
                              <span className={result.color}>{result.protocol}</span>
                            </div>
                          </TableCell>
                          <TableCell className={isHighestReturn ? "text-green-500 font-medium" : ""}>
                            {result.estimatedReturn.toFixed(2)} {result.toToken}
                            {isHighestReturn && <Check size={14} className="inline ml-1" />}
                          </TableCell>
                          <TableCell className={isLowestGas ? "text-green-500 font-medium" : ""}>
                            ${result.gasCost.toFixed(2)}
                            {isLowestGas && <Check size={14} className="inline ml-1" />}
                          </TableCell>
                          <TableCell>~{result.executionTime} sec</TableCell>
                          <TableCell className={isLowestImpact ? "text-green-500 font-medium" : ""}>
                            {result.priceImpact.toFixed(2)}%
                            {isLowestImpact && <Check size={14} className="inline ml-1" />}
                          </TableCell>
                          <TableCell>
                            {isBestOverall ? (
                              <Badge className="bg-green-500/10 text-green-500 hover:bg-green-500/20">
                                Recommended
                              </Badge>
                            ) : (
                              <Badge variant="outline">
                                Alternative
                              </Badge>
                            )}
                          </TableCell>
                        </TableRow>
                      );
                    })}
                  </TableBody>
                </Table>
              </div>
              
              <div className="flex justify-end space-x-3">
                <Button variant="outline" onClick={() => setShowResultsModal(false)}>
                  Close
                </Button>
                <Button onClick={() => setShowResultsModal(false)}>
                  <Zap size={16} className="mr-2" />
                  Execute on {simulationResults.results.find((r: any) => 
                    r.estimatedReturn === Math.max(...simulationResults.results.map((p: any) => p.estimatedReturn))
                  ).protocol}
                </Button>
              </div>
            </div>
          ) : simulationResults ? (
            // Single Protocol Result
            <div className="space-y-6">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-secondary/20 p-4 rounded-md">
                  <h3 className="text-sm font-medium mb-3">Transaction Overview</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Protocol:</span>
                      <span className="font-medium">{simulationResults.protocol}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">From:</span>
                      <span className="font-medium">{simulationResults.amount} {simulationResults.fromToken}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">To:</span>
                      <span className="font-medium">{simulationResults.estimatedReturn.toFixed(2)} {simulationResults.toToken}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Exchange Rate:</span>
                      <span className="font-medium">1 {simulationResults.fromToken} = {(simulationResults.estimatedReturn / simulationResults.amount).toFixed(4)} {simulationResults.toToken}</span>
                    </div>
                  </div>
                </div>
                
                <div className="bg-secondary/20 p-4 rounded-md">
                  <h3 className="text-sm font-medium mb-3">Gas & Execution Details</h3>
                  <div className="space-y-2">
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Gas Cost:</span>
                      <span className="font-medium">${simulationResults.gasCost.toFixed(2)}</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Execution Time:</span>
                      <span className="font-medium">~{simulationResults.executionTime} seconds</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Price Impact:</span>
                      <span className={`font-medium ${
                        simulationResults.priceImpact > 2 ? "text-red-500" : simulationResults.priceImpact > 1 ? "text-yellow-500" : "text-green-500"
                      }`}>{simulationResults.priceImpact.toFixed(2)}%</span>
                    </div>
                    <div className="flex justify-between">
                      <span className="text-muted-foreground">Slippage Tolerance:</span>
                      <span className="font-medium">{simulationResults.slippage}%</span>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Transaction Success Indicator */}
              <div className={`p-4 rounded-md ${
                simulationResults.success ? "bg-green-500/10 border border-green-500/20" : "bg-red-500/10 border border-red-500/20"
              }`}>
                <div className="flex items-start">
                  {simulationResults.success ? (
                    <Check className="text-green-500 mr-2 mt-0.5" size={18} />
                  ) : (
                    <X className="text-red-500 mr-2 mt-0.5" size={18} />
                  )}
                  <div>
                    <h3 className={`text-sm font-medium ${simulationResults.success ? "text-green-500" : "text-red-500"}`}>
                      {simulationResults.success ? "Transaction Simulation Successful" : "Transaction Simulation Failed"}
                    </h3>
                    <p className="text-sm mt-1">
                      {simulationResults.success
                        ? "This transaction is expected to execute successfully on-chain with the current parameters."
                        : "This transaction would likely fail on-chain. Please adjust parameters and try again."
                      }
                    </p>
                  </div>
                </div>
              </div>
              
              {/* Warnings */}
              {simulationResults.warnings.length > 0 && (
                <div className="p-4 bg-yellow-500/10 border border-yellow-500/20 rounded-md">
                  <div className="flex items-start">
                    <AlertTriangle className="text-yellow-500 mr-2 mt-0.5" size={18} />
                    <div>
                      <h3 className="text-sm font-medium text-yellow-500">Warnings</h3>
                      <ul className="text-sm mt-1 space-y-1 list-disc pl-4">
                        {simulationResults.warnings.map((warning: string, index: number) => (
                          <li key={index}>{warning}</li>
                        ))}
                      </ul>
                    </div>
                  </div>
                </div>
              )}
              
              {/* Route Information */}
              <div>
                <h3 className="text-sm font-medium mb-2">Routing Information</h3>
                <div className="bg-secondary/20 p-4 rounded-md">
                  <div className="flex items-center space-x-2">
                    <div className="bg-primary/20 text-primary px-2 py-1 rounded-md">
                      {simulationResults.fromToken}
                    </div>
                    <ChevronRight size={16} />
                    <div className="flex-1 text-xs text-center">
                      via {simulationResults.protocol} ({simulationResults.route[0].portion}%)
                    </div>
                    <ChevronRight size={16} />
                    <div className="bg-primary/20 text-primary px-2 py-1 rounded-md">
                      {simulationResults.toToken}
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="flex justify-end space-x-3">
                <Button variant="outline" onClick={() => setShowResultsModal(false)}>
                  Close
                </Button>
                <Button variant="outline" onClick={() => runMultiProtocolSimulation()}>
                  <RefreshCw size={16} className="mr-2" />
                  Compare with Other Protocols
                </Button>
                <Button onClick={() => setShowResultsModal(false)}>
                  <Zap size={16} className="mr-2" />
                  Execute Transaction
                </Button>
              </div>
            </div>
          ) : (
            <div className="py-4 text-center">
              <Skeleton className="h-40 w-full" />
            </div>
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}